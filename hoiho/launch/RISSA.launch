<launch>
<!--reconocedor -->
  <arg name="launch_face_detection" default="true" />
  <arg name="launch_trainer" default="true" />

  <arg name="use_opencv3" default="false" />
  <arg name="use_opencv3_1" default="false" />
  <arg name="use_opencv3_2" default="false" />
  <arg name="debug_view" default="true" />

  <arg name="image" default="/usb_cam/image_raw" />
  <arg name="data_dir" default="~/.ros/opencv_apps/face_data" />

  <node name = "usb_cam" pkg = "usb_cam" type = "usb_cam_node"/>
  <node name = "face_detection" pkg = "opencv_apps"  type = "face_detection">
  <remap from="image" to = "/usb_cam/image_raw"/>
  <param name ="debug_view" value = "true" type = "bool"/>
  <param name="face_cascade_name" value="/opt/ros/kinetic/share/OpenCV-3.2.0-dev/haarcascades/haarcascade_frontalface_alt.xml" />
  <param name="eyes_cascade_name" value="/opt/ros/kinetic/share/OpenCV-3.2.0-dev/haarcascades/haarcascade_eye_tree_eyeglasses.xml" />
  </node>

  <node name="face_recognition" pkg="opencv_apps" type="face_recognition"
        output="screen">
    <param name="data_dir" value="$(arg data_dir)" />
    <remap from="image" to="$(arg image)" />
    <remap from="faces" to="face_detection/faces" />
  </node>

  <node name="face_recognition_trainer" pkg="opencv_apps" type="face_recognition_trainer.py"
        if="$(arg launch_trainer)" launch-prefix="xterm -fn 12x24 -e" respawn="true">
    <remap from="image" to="$(arg image)" />
    <remap from="faces" to="face_detection/faces" />
    <remap from="train" to="face_recognition/train" />
  </node>

  <node name="$(anon debug_image_viewer)" pkg="image_view" type="image_view"
        if="$(arg debug_view)">
    <remap from="image" to="face_recognition/debug_image" />
  </node>

<!-- Kinect  -->
  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="camera" />
  <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="$(arg camera)_depth_optical_frame" />

  <!-- device_id can have the following formats:
         "B00367707227042B": Use device with given serial number
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "2@0"             : Use first device found on USB bus 2
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Use OpenNI's factory-calibrated depth->RGB registration? -->
  <arg name="depth_registration" default="false" />

  <!-- Arguments for remapping all device namespaces -->
  <arg name="rgb"                       default="rgb" />
  <arg name="ir"                        default="ir" />
  <arg name="depth"                     default="depth" />
  <arg name="depth_registered"          default="depth_registered" />
  <arg name="depth_registered_filtered" default="depth_registered" />
  <arg name="projector"                 default="projector" />

  <!-- Optionally suppress loading the driver nodelet and/or publishing the default tf
       tree. Useful if you are playing back recorded raw data from a bag, or are
       supplying a more accurate tf tree from calibration. -->
  <arg name="load_driver" default="true" />
  <arg name="publish_tf" default="true" />
  <!-- Processing Modules -->
  <arg name="rgb_processing"                  default="true"/>
  <arg name="ir_processing"                   default="true"/>
  <arg name="depth_processing"                default="true"/>
  <arg name="depth_registered_processing"     default="true"/>
  <arg name="disparity_processing"            default="true"/>
  <arg name="disparity_registered_processing" default="true"/>
  <arg name="hw_registered_processing"        default="true" />
  <arg name="sw_registered_processing"        default="true" />

  <!-- Disable bond topics by default -->
  <arg name="bond" default="false" /> <!-- DEPRECATED, use respawn arg instead -->
  <arg name="respawn" default="$(arg bond)" />

  <!-- Worker threads for the nodelet manager -->
  <arg name="num_worker_threads" default="4" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">
  
    <!-- Start nodelet manager in top-level namespace -->
    <arg name="manager" value="$(arg camera)_nodelet_manager" />
    <arg name="debug" default="false" /> <!-- Run manager in GDB? -->
    <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
      <arg name="name"                value="$(arg manager)" />
      <arg name="debug"               value="$(arg debug)" />
      <arg name="num_worker_threads"  value="$(arg num_worker_threads)" />
    </include>

    <!-- Load driver -->
    <include if="$(arg load_driver)"
	     file="$(find openni_launch)/launch/includes/device.launch.xml">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="$(arg manager)" />
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="depth_registration"    value="$(arg depth_registration)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="respawn"               value="$(arg respawn)" />
    </include>
    
    <!-- Load standard constellation of processing nodelets -->
    <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
      <arg name="manager"                         value="$(arg manager)" />
      <arg name="rgb"                             value="$(arg rgb)" />
      <arg name="ir"                              value="$(arg ir)" />
      <arg name="depth"                           value="$(arg depth)" />
      <arg name="depth_registered"                value="$(arg depth_registered)" />
      <arg name="depth_registered_filtered"       value="$(arg depth_registered_filtered)" />
      <arg name="projector"                       value="$(arg projector)" />
      <arg name="respawn"                         value="$(arg respawn)" />
      <arg name="rgb_processing"                  value="$(arg rgb_processing)" />
      <arg name="ir_processing"                   value="$(arg ir_processing)" />
      <arg name="depth_processing"                value="$(arg depth_processing)" />
      <arg name="depth_registered_processing"     value="$(arg depth_registered_processing)" />
      <arg name="disparity_processing"            value="$(arg disparity_processing)" />
      <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
      <arg name="hw_registered_processing"        value="$(arg hw_registered_processing)" />
      <arg name="sw_registered_processing"        value="$(arg sw_registered_processing)" />
    </include>
  
  </group> <!-- camera -->

  <!-- Load reasonable defaults for the relative pose between cameras -->
  <include if="$(arg publish_tf)"
	   file="$(find rgbd_launch)/launch/kinect_frames.launch">
    <arg name="camera" value="$(arg camera)" />
  </include>


<!-- ORB_SLAM -->

  <node name="RGBD" pkg="ORB_SLAM2" type="RGBD" args="/home/rissa/ORB_SLAM2/Vocabulary/ORBvoc.txt /home/rissa/ORB_SLAM2/Examples/RGB-D/TUM1.yaml" output="screen">
  </node>


<!-- Sound play   -->
  <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py" output="screen">
  </node> 


<!-- iRobot Create -->
  <arg name="config" default="$(find ca_driver)/config/default.yaml"/>
  <arg name="desc" default="true"/>
 -<node name="ca_driver" pkg="ca_driver" type="ca_driver" output="screen">
   <rosparam command="load" file="$(arg config)"/>
   <param name="robot_model" value="CREATE_2"/>
  </node>
  <!-- Robot description -->
  <include if="$(arg desc)" file="$(find ca_description)/launch/create_2.launch"/>

  <!-- pausa -->
  <node  pkg="RISSA" type="pausa.sh" name="pausa" output="screen"/>

<!-- pocket sphinx -->

  <node name="recognizer" pkg="pocketsphinx" type="recognizer.py" output="screen">
    <param name="lm" value="$(find pocketsphinx)/demo/palabras.lm"/>
    <param name="dict" value="$(find pocketsphinx)/demo/palabras.dic"/>
  </node>




<!-- Mando_brazos -->
  <node name="mandobrazos" pkg="RISSA" type="mandobrazos.py" output="screen">
  </node>


<!-- pi -->

  <node  pkg="RISSA" type="pi.sh" name="pi" output="screen">
  </node>


  <!-- cantar -->
  <node  pkg="RISSA" type="cancion.py" name="cantar" output="screen"/>

</launch>
